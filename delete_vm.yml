---
- hosts: proxmox
  become: false
  gather_facts: false
  vars:
    clusters_node: 'pve1'
    # api_user: 'root@pam'
    # api_passwd: ''
    api_host: '{{ ansible_host }}'
    kvm:
      ansible.opsta:
        vmid: 89100

  tasks:

    - name: stop kvm
      ignore_errors: true
      proxmox_kvm:
        node: '{{ clusters_node }}'
        api_user: '{{ api_user }}'
        api_password: '{{ api_passwd }}'
        api_host: '{{ api_host }}'
        name: '{{ item.key }}'
        state: stopped
        force: yes
      with_dict: '{{ kvm }}'
      loop_control:
        pause: 8

    - name: delete kvm
      ignore_errors: true
      proxmox_kvm:
        node: '{{ clusters_node }}'
        api_user: '{{ api_user }}'
        api_password: '{{ api_passwd }}'
        api_host: '{{ api_host }}'
        name: '{{ item.key }}'
        state: absent
      with_dict: '{{ kvm }}'
      register: 'chk_meta'

    # - debug: var='chk_meta'
    
    # - name: start container
    #   ignore_errors: true
    #   proxmox_kvm:
    #     node: '{{ node }}'
    #     api_user: '{{ api_user }}'
    #     api_password: '{{ api_passwd }}'
    #     api_host: '{{ api_host }}'
    #     name: '{{ item.item.key }}'
    #     state: started
    #   with_items: '{{ created_cts_pve.results }}'
    #   when: 
    #     - 'not item.changed | default(false) | bool'
    #     - 'not item.item.value.kvm_state_delete | default(false) | bool'

    # - name: stop container
    #   proxmox_kvm:
    #     node: '{{ node }}'
    #     api_user: '{{ api_user }}'
    #     api_password: '{{ api_passwd }}'
    #     api_host: '{{ api_host }}'
    #     name: '{{ item.item.key }}'
    #     state: stopped
    #     force: yes
    #   notify:
    #     - 'sleep'
    #   with_items: '{{ created_cts_pve.results }}'
    #   when: 'item.item.value.kvm_state_delete | default(false) | bool'

    # - name: remove container
    #   proxmox_kvm:
    #     node: '{{ node }}'
    #     api_user: '{{ api_user }}'
    #     api_password: '{{ api_passwd }}'
    #     api_host: '{{ api_host }}'
    #     name: '{{ item.item.key }}'
    #     state: absent
    #   with_items: '{{ created_cts_pve.results }}'
    #   when: 'item.item.value.kvm_state_delete | default(false) | bool'
  
  handlers:
    - name: 'sleep'
      pause:
        seconds: 10